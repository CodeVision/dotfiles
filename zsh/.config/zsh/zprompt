# zsh prompt configuration file
# vim: ft=zsh

# possibly useful escape sequences
# %#      : shell elevation state
# %M / %m : full / short hostname
# %n      : username
# %d / %/ : current directory ($PWD)
# %~      : current directory (shortened with ~ if applicable)
# %c / %. : directories preceding $PWD (usage: %c, %2c, etc..)
#
# open / close sequences
# %U %u   : underline
# %B %b   : bold
# %K %k   : background color (usage: %K{red}%k )
# %F %f   : foreground color (usage: see above)
# %S %s   : highlight

# TODO:
# - add vcs info
# - look into prompt newline

autoload -Uz colors
colors

setopt prompt_subst
setopt transient_rprompt

function title() {
    # escape '%' chars in $1, make nonprintables visible
    local a=${(V)1//\%/\%\%}

    # Truncate command, and join lines.
    a=$(print -Pnr "%40>...>$a" | tr -d "\n")
    case $TERM in
        screen*)
            print -Pn "\e]2;$a @ $2\a" # plain xterm title
            print -Pn "\ek$a\e\\"      # screen title (in ^A")
            print -Pn "\e_$2   \e\\"   # screen location
            ;;
        xterm*)
            print -Pn "\e]2;$a @ $2\a" # plain xterm title
            ;;
    esac
}

local prompt_newline=$'\n%{\r%}'

autoload add-zsh-hook
add-zsh-hook precmd theme_precmd
# disable for now to prevent double execution when capturing command output
# (i.e. $(..))
# add-zsh-hook preexec theme_preexec

vcs-status() {
    vcs_prompt=''
    git-status
}

git-status() {
    # only git for now
    ([ -d ".git" ] || git status --porcelain &> /dev/null) || return 1

    branch=$(git symbolic-ref -q HEAD)
    branch=${branch##refs/heads/}
    branch=${branch:-HEAD}

    status_info=$(git status --porcelain)
    if [[ $status_info =~ "^ M" ]]; then
        mod_color=red
    elif [[ $status_info =~ "^\?\?" ]]; then
        mod_color=yellow
    else
        mod_color=green
    fi

    vcs_prompt="%B[%b %F{green}$branch%f %F{$mod_color}%B∓%b%f %B]─%b"

    return 0
}

hg-status() {
    vcs_prompt="%B[%b %F{green}$branch%f %F{$mod_color}%B↯%b%f %B]─%b"
}

# precmd is called just before the prompt is printed
theme_precmd() {
    title "zsh" "%m:%55<...<%~"
    vcs-status
    set_prompts
}

# preexec is called just before any command line is executed
theme_preexec() {
    # executes captured commands ($(..)) twice, e.g. $(docker run ...) runs docker 
    # twice, so disabled for now (by disabling hook)
    title "$1" "%m:%35<...<%~"
}

function zle-line-init zle-keymap-select {
    if [[ ${${TTY##*/}%%[1-9]} != 'tty' ]]; then
        case $KEYMAP in
            vicmd)      print -n -- "\e[1 q";;  # block cursor
            viins|main) print -n -- "\e[5 q";;  # line cursor
        esac
    fi

    set_rprompt
    zle reset-prompt
}

function zle-line-finish {
    if [[ ${${TTY##*/}%%[1-9]} != 'tty' ]]; then
        print -n -- "\e[1 q"  # block cursor
    fi
}

zle -N zle-line-init
zle -N zle-line-finish
zle -N zle-keymap-select

# Highlight (bold) user input
zle_highlight[(r)default:*]="default:fg=white,bold"

set_rprompt() {
    RPROMPT="${${KEYMAP/(main|viins)/-- INSERT --}/vicmd/-- NORMAL --}"
    RPROMPT2=$RPROMPT
}

set_prompts() {
    PROMPT="%B┌─[%b %n${SSH_TTY:+@%m} %B]─[%b %~ %B]─$vcs_prompt$prompt_newline%B└─●%(?.%F{green}❯%f.%F{red}❯%f)%b "
    PS4='+%N:%i:%_>'
}

set_prompts
set_rprompt
